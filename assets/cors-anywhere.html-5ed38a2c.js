const e=JSON.parse('{"key":"v-54bae169","path":"/services/dockers-on-nas/cors-anywhere.html","title":"CORS Anywhere：解锁跨域限制","lang":"zh-CN","frontmatter":{"article":false,"title":"CORS Anywhere：解锁跨域限制","order":100,"description":"CORS Anywhere 是一个基于 NodeJS 的代理服务，专门用于向跨源请求中注入 CORS（跨源资源共享）头部。为了了解其背后的逻辑，需要首先理解浏览器的同源策略：当你的前端 JavaScript 代码企图从一个域访问另外一个域的内容时，浏览器默认会阻拦这样的请求，除非目的域有合适的 CORS 头部标识。但有了 CORS Anywhere，这些浏览器的安全限制就可以轻松绕过。 如果你想自行部署，可以选择自建镜像。我也提供了一个预先配置好的容器版本，可在 Docker Hub 上找到 rockben/cors-anywhere。","head":[["meta",{"property":"og:url","content":"https://gpt-vip.top/services/dockers-on-nas/cors-anywhere.html"}],["meta",{"property":"og:site_name","content":"LearnHubs"}],["meta",{"property":"og:title","content":"CORS Anywhere：解锁跨域限制"}],["meta",{"property":"og:description","content":"CORS Anywhere 是一个基于 NodeJS 的代理服务，专门用于向跨源请求中注入 CORS（跨源资源共享）头部。为了了解其背后的逻辑，需要首先理解浏览器的同源策略：当你的前端 JavaScript 代码企图从一个域访问另外一个域的内容时，浏览器默认会阻拦这样的请求，除非目的域有合适的 CORS 头部标识。但有了 CORS Anywhere，这些浏览器的安全限制就可以轻松绕过。 如果你想自行部署，可以选择自建镜像。我也提供了一个预先配置好的容器版本，可在 Docker Hub 上找到 rockben/cors-anywhere。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-01T10:03:56.000Z"}],["meta",{"property":"article:author","content":"清顺"}],["meta",{"property":"article:modified_time","content":"2023-12-01T10:03:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"CORS Anywhere：解锁跨域限制\\",\\"description\\":\\"CORS Anywhere 是一个基于 NodeJS 的代理服务，专门用于向跨源请求中注入 CORS（跨源资源共享）头部。为了了解其背后的逻辑，需要首先理解浏览器的同源策略：当你的前端 JavaScript 代码企图从一个域访问另外一个域的内容时，浏览器默认会阻拦这样的请求，除非目的域有合适的 CORS 头部标识。但有了 CORS Anywhere，这些浏览器的安全限制就可以轻松绕过。 如果你想自行部署，可以选择自建镜像。我也提供了一个预先配置好的容器版本，可在 Docker Hub 上找到 rockben/cors-anywhere。\\"}"]]},"headers":[{"level":2,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[]},{"level":2,"title":"构建自定义 Docker 镜像","slug":"构建自定义-docker-镜像","link":"#构建自定义-docker-镜像","children":[]}],"git":{"createdTime":1701425036000,"updatedTime":1701425036000,"contributors":[{"name":"libaxuan","email":"33255877+libaxuan@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.67,"words":500},"filePathRelative":"services/dockers-on-nas/cors-anywhere.md","localizedDate":"2023年12月1日","excerpt":"<p><a href=\\"https://github.com/Rob--W/cors-anywhere\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">CORS Anywhere</a> 是一个基于 NodeJS 的代理服务，专门用于向跨源请求中注入 CORS（跨源资源共享）头部。为了了解其背后的逻辑，需要首先理解浏览器的同源策略：当你的前端 JavaScript 代码企图从一个域访问另外一个域的内容时，浏览器默认会阻拦这样的请求，除非目的域有合适的 CORS 头部标识。但有了 CORS Anywhere，这些浏览器的安全限制就可以轻松绕过。</p>\\n<p>如果你想自行部署，可以选择自建镜像。我也提供了一个预先配置好的容器版本，可在 Docker Hub 上找到 <a href=\\"https://hub.docker.com/r/rockben/cors-anywhere\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">rockben/cors-anywhere</a>。</p>","autoDesc":true}');export{e as data};
